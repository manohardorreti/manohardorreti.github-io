#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <time.h>

// Wi-Fi credentials
const char* ssid = "manohar";
const char* password = "123456789";

const char* GOOGLE_SCRIPT_ID = "https://script.google.com/macros/s/AKfycbxDa3csYpkDGX87Qkmgxf6z5XC3xO-z2ZtMxToDvFWjIzb93wGodxkmrFWZhE894GFa/exec";

// Initialize the LCD
LiquidCrystal_I2C lcd(0x27, 16, 2);



// Timezone offset for IST (UTC+5:30)
const long utcOffsetInSeconds = 19800;

void setup() {
  // Start serial and LCD
  Serial.begin(115200);
  lcd.begin();
  lcd.backlight();
  

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi...");

  // WiFi connection timeout
  unsigned long startAttemptTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 30000) {
    delay(1000);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("Connected to WiFi");
  } else {
    Serial.println("Failed to connect to WiFi");
  }

  // Sync time
  configTime(utcOffsetInSeconds, 0, "pool.ntp.org", "time.nist.gov");
  Serial.println("Time synchronized.");
}

bool isFetchTime() {
  time_t now = time(nullptr);
  struct tm* timeInfo = localtime(&now);

  // Fetch current hour and minute
  int hour = timeInfo->tm_hour;
  int minute = timeInfo->tm_min;

  // Allow fetch only between specific times
  if ((hour == 7 && minute <= 10) ||  // 7:00 AM to 7:10 AM
      (hour == 13 && minute <= 10) || // 12:00 PM to 12:10 PM
      (hour == 22 && minute <= 10)) { // 10:00 PM to 10:10 PM
    return true;
  }
  return false;
}

void loop() {
  if (WiFi.status() == WL_CONNECTED && isFetchTime()) {
    std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);
    client->setInsecure();

    HTTPClient http;
    http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
    http.begin(*client, GOOGLE_SCRIPT_ID);

    int httpResponseCode = http.GET();
    if (httpResponseCode == 200) {
      String payload = http.getString();
      Serial.println("Data fetched: " + payload);

      // Parse JSON
      DynamicJsonDocument doc(1024);
      deserializeJson(doc, payload);

      const char* title = doc["title"];
      const char* message = doc["message"];

      // Display on LCD
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(title);
      lcd.setCursor(0, 1);
      lcd.print(message);
    } else {
      Serial.println("Error fetching data: " + String(httpResponseCode));
    }
    http.end();
  } else {
    


      // Display live time on LCD
    time_t now = time(nullptr);
    struct tm* timeInfo = localtime(&now);

    char timeString[9]; // Buffer for "hh:mm:ss"
    strftime(timeString, sizeof(timeString), "%H:%M:%S", timeInfo);



    // Determine AM/PM
    const char* ampm = (timeInfo->tm_hour >= 12) ? "PM" : "AM";

    // Convert hour from 24-hour format to 12-hour format
    if (timeInfo->tm_hour > 12) {
      timeInfo->tm_hour -= 12;  // Convert hour to 12-hour format if > 12
    } else if (timeInfo->tm_hour == 0) {
      timeInfo->tm_hour = 12;  // Midnight should show as 12:xx:xx AM
    }





    // Clear LCD if not fetch time
    /*lcd.clear();
    lcd.setCursor(1, 1);
    lcd.print("No fetch time");
    lcd.createChar(2, smile);
    lcd.write(2);
    lcd.setCursor(0, 1);
    lcd.print(timeString);  // Display time in 12-hour format
    lcd.print(" ");
    lcd.print(ampm);  // Display AM or PM*/


    // Clear the LCD if there is no fetch time
    lcd.clear();  // Clears the display
    lcd.setCursor(0, 0);  // Set the cursor to the beginning of the first row
    lcd.print("No fetch time ");  // Display "No fetch time"
    

    lcd.setCursor(0, 1);  // Move to the second row
    lcd.print(timeString);  // Display time in 12-hour format (e.g., "13:32:19")
    lcd.print(" ");  // Add a space between time and AM/PM
    lcd.print(ampm);  // Display AM or PM (e.g., "PM")


  }

  delay(1000); // Check every 10 seconds
}


    







Gsc:   function doGet() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Sheet1"); // Replace with your sheet name
  const data = sheet.getRange("A1:E1").getValues()[0]; // Fetch data from A1:E1
  const currentTime = new Date();
  const hour = currentTime.getHours();

  let response = {};

  if (hour === 7) { // 7:00 AM
    response = { title: data[0], message: data[1] }; // Treating Fever, Medicine Time
  } else if (hour === 13) { // 12:50 PM
    response = { title: data[0], message: data[1] }; // Treating Fever, Medicine Time
  } else if (hour === 22) { // 10:00 PM
    response = { title: data[0], message: data[1] }; // Treating Fever, Medicine Time
  } else {
    response = { title: "No Data", message: "Check Time" }; // Default message
  }

  return ContentService.createTextOutput(JSON.stringify(response)).setMimeType(ContentService.MimeType.JSON);
}
